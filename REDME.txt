1. Змінив розрахунок ціни оренди фільмів за допомогою патерну Strategy. Ця реалізація дозволяє додавати нові типи фільмів,
не змінюючи існуючий код. Можна легко створювати нові стратегії для розрахунку цін і пов'язувати їх з різними типами фільмів.
В свою чергу тут стикнувся з проблемою якраз з типом фільмів так як явно я їх ніде не передаю і безпосередньо можу
звертатись до типу тільки через створення обьєктів классів стратегій.

2. Додавання нових характеристик фільмів реалізував за допомогою патерну Decorator. Абстрактний класс AbstractMovie (декоратор) розширює
 початковий клас Movie з можливістю додавання нових характеристик без зміни самого класу Movie і з відсутністю непотрібних підкласів бо підтримується
 змінна кількість атрибутів (характеристик) - один або більше.

3. Збереження даних користувачів, каталогу фільмів реалізував за допомогою патерну Facade. Перевагою такого методу є
зручний доступ до функцій системи без розуміння деталей як саме ця система працює - простий інтерфейс для користувач
який скриває деталі роботи з файлами та складовими системи вцілому.

------
Не до кінця розібрався як реалізувати HTML вигляд виводу даних для користувача, є ідея що потрібно було використати
патерн Template Method. Також виникли проблеми на этапі демонстрації роботи програми з MovieType який виключається через патерн стратегію, але
водночас з цим не розумію як тоді отримувати доступ до типу фільмів і записувати нові дані в каталог. Тому виникли проблеми
в класах Customer і Main через неможливість підтримання логіки програми без явного звернення до MovieType.